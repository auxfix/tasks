- Общая часть.

1. Расскажите о себе.
2. Приведите пример, сложной задачи, которую пришлось реализовать
на прошлом месте.
2.1 Какой аспект работы больше нравится, техническая часть или менеджмент?
3. Приведите пример факапа, с прошлого места.
4. Как вы поддерживаете свои технические навыки актуальными?
5. Какие методы, используете для мотивации, и развития команды.
6. Как решаетет конфликтные ситуации в команде?
7. Какие качества вы неприемлите и не терпите у своих подчиненных?
7.1 Кто для вас хороший руководитель, кто плохой.
7.2 Как можете описать свой стиль руководств? (Жесткий, мягкий, кнута и пряника, либеральный)
8. Какие привествуете?
9. Какие практики, стараетесь внедрять в команде? (как технические так и культурные)
10. Каких моментов стараетесь избегать?


- Бэк
1. Что такое бэк энд. 
    - Какие бывают: Monolit, Microservice, EventDriven, Serverless.
        (какие когда лучше использовать)
    - Какие компонеты бывают:
        (сам сервер, API, базы данных, кэши, логирование, логика, очереди сообщений).
    - Какие бывают базы данных.
        (SQl, NoSql, Встраиваемые, распеределленные, Data Warehouses)
        - какие когда использовать.
        - SQL vs NoSql
    - Kafka vs RabbitMQ
        Kafka - хранит все, быстрая, подходит для потоковой обработки.
        RebbitMq - ограничение по хранению, но более надежный механизм доставки.
    - Какие бывают API:
        (REST, SOAP, graphQl, gRTC)
    
3. Предпочтительный стэк технологий(фронт, бэк). Почему?

 - or - 

3.1.  Бэк, дизайн.
    - Если бы вы планировали новый прокект, какой фреймворк\стек выбрали бы для бэка?(node,Java,ASP.net)
      почему?(social media platform for example, 10.000 rps, facebook for example has 75 mln rps)
    - Какой для фронт-энда. Почему?
    - Как относитесь к FullStack фреймворкам таким как Next, Nuxt, Remix.


4.(-1) Вопрос, про провальную архитектуру Node.JS.

4. Что лучше и когда использовать EventLoop(Async I\O) vs Multithreads(Content Switching)
8. Способы оптимизации бэк приложения.

- Branching strategy:
    - trunk
    - merge based
    - fork based
    - release based

- Фронт.
11. Что происходит после ввода строки в адресной строке браузера.
12. Чем так хорошо Реакт.
13. Какие хуки знаете. Правила хуков.
14. SSR. Next. Гидрация.
15. HTTP(1\2\3)

-DevOps.
14. ClusterIp, NodePort, 
15. LoadBalancer и Ingress в k8s. Зачем они нужены, в чем отличия. (они снаруже кластера, или внутри?)
16. Что такое прогресивная поставка, какие тулзы знаете(canary, blue green deployments, rollout updates)
17. Что такое канареечное развертование, какие способы реализации знаете.(Fagger,Argo Rollouts)

